#include <iostream>
#include <cmath>
#include <array>

const double PI = 3.14159265358979323846;

// Convert degrees to radians
inline double degreesToRadians(double degrees) {
    return degrees * PI / 180.0;
}

std::array<double, 3> calculateMotorHeights(double x_base, double roll_deg, double pitch_deg, double yaw_deg) {
    // Define motor positions in an equilateral triangle
    std::array<std::array<double, 3>, 3> motors = {{
        {0, 0, 0},                           // Motor 1 at (0, 0)
        {x_base, 0, 0},                      // Motor 2 at (x_base, 0)
        {x_base / 2, x_base * sqrt(3) / 2, 0} // Motor 3 at (x_base/2, sqrt(3)*x_base/2)
    }};
    
    // Calculate center of the triangle (pivot point for yaw)
    std::array<double, 3> center = {
        (motors[0][0] + motors[1][0] + motors[2][0]) / 3,
        (motors[0][1] + motors[1][1] + motors[2][1]) / 3,
        0
    };

    // Convert angles to radians
    double roll = degreesToRadians(roll_deg);
    double pitch = degreesToRadians(pitch_deg);
    double yaw = degreesToRadians(yaw_deg);

    // Rotation matrices for roll, pitch, and yaw
    std::array<std::array<double, 3>, 3> rollMatrix = {{
        {1, 0, 0},
        {0, cos(roll), -sin(roll)},
        {0, sin(roll), cos(roll)}
    }};
    
    std::array<std::array<double, 3>, 3> pitchMatrix = {{
        {cos(pitch), 0, sin(pitch)},
        {0, 1, 0},
        {-sin(pitch), 0, cos(pitch)}
    }};
    
    std::array<std::array<double, 3>, 3> yawMatrix = {{
        {cos(yaw), -sin(yaw), 0},
        {sin(yaw), cos(yaw), 0},
        {0, 0, 1}
    }};

    // Apply transformations and calculate new z-heights for each motor
    std::array<double, 3> heights;
    for (int i = 0; i < 3; ++i) {
        // Translate motor to center
        double x = motors[i][0] - center[0];
        double y = motors[i][1] - center[1];
        double z = motors[i][2];

        // Apply yaw, pitch, and roll transformations
        double x_yaw = yawMatrix[0][0] * x + yawMatrix[0][1] * y + yawMatrix[0][2] * z;
        double y_yaw = yawMatrix[1][0] * x + yawMatrix[1][1] * y + yawMatrix[1][2] * z;
        double z_yaw = yawMatrix[2][0] * x + yawMatrix[2][1] * y + yawMatrix[2][2] * z;

        double x_pitch = pitchMatrix[0][0] * x_yaw + pitchMatrix[0][1] * y_yaw + pitchMatrix[0][2] * z_yaw;
        double y_pitch = pitchMatrix[1][0] * x_yaw + pitchMatrix[1][1] * y_yaw + pitchMatrix[1][2] * z_yaw;
        double z_pitch = pitchMatrix[2][0] * x_yaw + pitchMatrix[2][1] * y_yaw + pitchMatrix[2][2] * z_yaw;

        double x_roll = rollMatrix[0][0] * x_pitch + rollMatrix[0][1] * y_pitch + rollMatrix[0][2] * z_pitch;
        double y_roll = rollMatrix[1][0] * x_pitch + rollMatrix[1][1] * y_pitch + rollMatrix[1][2] * z_pitch;
        double z_roll = rollMatrix[2][0] * x_pitch + rollMatrix[2][1] * y_pitch + rollMatrix[2][2] * z_pitch;

        // Translate back to original position and store the height (z-value)
        heights[i] = z_roll + center[2];
    }

    return heights;
}

int main() {
    // Example usage of the function
    double x_base = 1.0;     // Length of triangle base in meters
    double roll_deg = 10.0;  // Roll in degrees
    double pitch_deg = 15.0; // Pitch in degrees
    double yaw_deg = 20.0;   // Yaw in degrees

    std::array<double, 3> heights = calculateMotorHeights(x_base, roll_deg, pitch_deg, yaw_deg);

    std::cout << "Height of Motor 1: " << heights[0] << " m\n";
    std::cout << "Height of Motor 2: " << heights[1] << " m\n";
    std::cout << "Height of Motor 3: " << heights[2] << " m\n";

    return 0;
}